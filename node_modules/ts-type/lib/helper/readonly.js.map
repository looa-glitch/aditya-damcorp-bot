{"version":3,"file":"readonly.js","sourceRoot":"","sources":["readonly.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * @see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html\n *\n * Add readonly and ?\n */\nimport { ITSUnpackedArrayLike } from './unpacked';\n\nexport type ITSReadonlyPartial<T> = {\n\treadonly [P in keyof T]?: T[P]\n};\n\nexport type ITSWriteable<T> = ITSWriteablePick<T, keyof T>;\n\nexport type ITSWriteablePick<T, K extends keyof T> = {\n\t-readonly [P in K]: T[P];\n};\n\nexport type ITSWriteableWith<T, K extends keyof T> = Omit<T, K> & ITSWriteablePick<T, K>;\n\nexport type ITSReadonlyToWriteableArray<T extends readonly any[]> = Omit<T, keyof any[]> & ITSUnpackedArrayLike<T>[] & {\n\t-readonly [P in number | 'length']: T[P]\n};\n"]}