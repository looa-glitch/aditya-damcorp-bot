{"version":3,"file":"Optimizer.js","sourceRoot":"","sources":["Optimizer.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AACH,YAAY,CAAC;;;;;;;;;AAEb,qDAA2C;AAE3C,+BAAyD;AAazD;IAAA,IAAa,mBAAmB;IADhC,aAAa;IACb,MAAa,mBAAoB,SAAQ,gBAAU;QAAnD;;YAGiB,SAAI,GAAG,WAAW,CAAC;QAmBpC,CAAC;QAjBO,UAAU,CAAC,KAAc,EAAE,GAAG,IAAI;YAExC,MAAM,IAAI,KAAK,EAAE,CAAC;QACnB,CAAC;QAEM,IAAI,CAAC,OAAgB,EAAE,GAAG,IAAI;YAEpC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;YAE7B,OAAO,IAAI,CAAC;QACb,CAAC;QAEM,MAAM,CAAC,IAAI,CAAsD,OAAgB,EAAE,GAAG,IAAI;YAEhG,aAAa;YACb,OAAO,KAAK,CAAC,IAAI,CAAI,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QACxC,CAAC;KACD,CAAA;IApBuB,wBAAI,GAAG,WAAW,CAAC;IAF9B,mBAAmB;QAF/B,0BAAQ;QACT,aAAa;OACA,mBAAmB,CAsB/B;IAAD,0BAAC;KAAA;AAtBY,kDAAmB;AAwBhC;;GAEG;AACH,MAAa,SAAU,SAAQ,aAAO;IAAtC;;QAEC,SAAI,GAAG,WAAW,CAAC;IAapB,CAAC;IAXA;;;;;;OAMG;IACH,UAAU,CAAC,KAAc,EAAE,IAAqB,EAAE,GAAG,IAAI;QAExD,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;IAC3D,CAAC;CACD;AAfD,8BAeC;AAED,kBAAe,SAAS,CAAC","sourcesContent":["/**\n * 优化模块管理器\n *\n * @author 老雷<leizongmin@gmail.com>\n */\n'use strict';\n\nimport { autobind } from 'core-decorators';\nimport { Segment, IWord } from '../Segment';\nimport { ISubSModule, SModule, SubSModule } from './mod';\n\nexport type ISubOptimizer = ISubSModule & {\n\ttype: 'optimizer',\n\tdoOptimize(words: IWord[], ...argv): IWord[],\n}\n\nexport type ISubOptimizerCreate<T extends SubSModuleOptimizer, R extends SubSModuleOptimizer = SubSModuleOptimizer> = {\n\t(segment: Segment, ...argv): T & R,\n};\n\n@autobind\n// @ts-ignore\nexport class SubSModuleOptimizer extends SubSModule implements ISubOptimizer\n{\n\tpublic static readonly type = 'optimizer';\n\tpublic readonly type = 'optimizer';\n\n\tpublic doOptimize(words: IWord[], ...argv): IWord[]\n\t{\n\t\tthrow new Error();\n\t}\n\n\tpublic init(segment: Segment, ...argv)\n\t{\n\t\tsuper.init(segment, ...argv);\n\n\t\treturn this;\n\t}\n\n\tpublic static init<T extends SubSModuleOptimizer = SubSModuleOptimizer>(segment: Segment, ...argv): T\n\t{\n\t\t// @ts-ignore\n\t\treturn super.init<T>(segment, ...argv);\n\t}\n}\n\n/**\n * 分词模块管理器\n */\nexport class Optimizer extends SModule\n{\n\ttype = 'optimizer';\n\n\t/**\n\t * 对一段文本进行分词\n\t *\n\t * @param {array} words 单词数组\n\t * @param {array} modules 分词模块数组\n\t * @return {array}\n\t */\n\tdoOptimize(words: IWord[], mods: ISubOptimizer[], ...argv): IWord[]\n\t{\n\t\treturn this._doMethod('doOptimize', words, mods, ...argv);\n\t}\n}\n\nexport default Optimizer;\n"]}